<?php/**BONUS - by system						0	0	0		0	0	0		+$	0	0*PENALTY									0	0	0		0	0	0		-$	0	0*CASHIN - add funds from p.sys			0	0	0		0	0	0		+$	0	0	[needs 'oParams2' filled date, batch or set via opConfirm 'params']*CASHOUT - withdraw to p.sys				$$	0	0		-$	0	+$		0	0	-$EX - exchange							$$	0	0		-$	+$	0		0	-$	0*TR - send								$$	0	0		-$	0	+$		0	0	-$*TRIN - receive							0	0	0		0	0	0		+$	0	0 (uid2)BUY - buy item							$$	0	0		-$	+$	0		0	-$	0SELL - sell item 						0	0	0		0	0	0		+$	0	0BUY2 - use service 						$$	0	0		-$	+$	0		0	-$	0SELL2 - provide service					0	0	0		0	0	0		+$	0	0REF - referral comission N				0	0	0		0	0	0		+$	0	0GIVE - make deposit						$$	0	0		-$	+$	0		0	0	0TAKE - withdraw to balance				0	0	0		0	0	0		+$	-$	0CALCIN - periodically by system			0	0	0		0	0	0		+$	0	0CALCOUT									$$	0	0		0	0	0		-$	0	0----------------------------------0 = Ожидание (подтверждения)1 = Ожидает пополнения2 = Ожидает обработки (выполнения)3 = Выполнена4 = Отклонена5 = Отменена*/function opUser($uid){	global $db;	return $db->count('Users', 'uID=?d and (uState=1 or uState=2)', array($uid));}function _zr($z, $cid){	return 0+_z($z, $cid, 0);}function opCalcComis($cid, $oper, $sum, $by_admin){	global $db, $_cfg, $_currs2;	if ($oper == 'EX')	{		$c = $_cfg;		$prfx = 'Bal_Oper' . $oper;	}	else	{		$c = $_currs2[$cid];		$prfx = 'c' . $oper;	}	if (!$by_admin and !$c[$prfx . 'Mode'] and ($oper != 'TRIN'))		return 'oper_disabled';	if ($c[$prfx . 'Int'] and (round($sum) != $sum))		return 'sum_not_int';	if ($sum < $c[$prfx . 'Min'])		return 'sum_min';	if (($c[$prfx . 'Max'] > 0) and ($sum > $c[$prfx . 'Max']))		return 'sum_max';	$csum = _zr(calcPerc($sum, $c[$prfx . 'Comis'], 6), $cid);	if ($csum < $c[$prfx . 'ComisMin'])		$csum = 0 + $c[$prfx . 'ComisMin'];	elseif (($c[$prfx . 'ComisMax'] > 0) and ($csum > $c[$prfx . 'ComisMax']))		$csum = 0 + $c[$prfx . 'ComisMax'];	return _zr($csum, $cid);}function opReCalcAF($cid, $curr, $sum){	// PM, RUB, 10	// 10 RUB from PM (USD) => xRate => 0.15 USD -> 10.34 RUB	global $_cfg, $_currs, $_currs2;	$c = $_currs2[$cid];	if (!$c or !$_currs[$curr])		return array(false, false);	$curr2 = $c['cCurrID'];	$zc = $_cfg['Bal_Rate' . $curr2];	$zto = $_cfg['Bal_Rate' . $curr];//	$coef = $zto / ($zc * (1 + $_cfg['Bal_OperEXIn'] / 100));	$coef = $zto / $zc;	$sum2 = _z($sum * $coef, $curr2, 0);	$sum = opReCalcAFReal($cid, $curr, $sum2);	return array($sum, $sum2);}function opReCalcAFReal($cid, $curr, $sum){	// PM, RUB, 10	// 0.15 PM (USD) => xRate => 10.34 RUB	global $_cfg, $_currs, $_currs2;	$c = $_currs2[$cid];	if (!$c or !$_currs[$curr])		return array(false, false);	$curr2 = $c['cCurrID'];	$zc = $_cfg['Bal_Rate' . $curr2];	$zto = $_cfg['Bal_Rate' . $curr];//	$coef = $zto / ($zc * (1 + $_cfg['Bal_OperEXIn'] / 100));	$coef = $zto / $zc;	return _z($sum / $coef, $curr, 0);}function opReCalcWD($cid, $curr, $sum){	global $_cfg, $_currs, $_currs2;	$c = $_currs2[$cid];	if (!$c or !$_currs[$curr])		return array(false, false);	$curr2 = $c['cCurrID'];	$zc = $_cfg['Bal_Rate' . $curr2];	$zto = $_cfg['Bal_Rate' . $curr];//	$coef = $zto / ($zc * (1 + $_cfg['Bal_OperEXIn'] / 100));	$coef = $zto / $zc;	$sum2 = _z($sum * $coef, $curr2, 0);	$sum = _z($sum2 / $coef, $curr, 0);	return array($sum, $sum2);}function opReCalcEX($curr, $curr2, $sum){	global $_cfg, $_currs;	if (!$_currs[$curr] or !$_currs[$curr2])		return array(false, false);	$zc = $_cfg['Bal_Rate' . $curr2];	$zto = $_cfg['Bal_Rate' . $curr];//	$coef = $zto / ($zc * (1 + $_cfg['Bal_OperEXIn'] / 100));	$coef = $zto / $zc;	$sum2 = _z($sum * $coef, $curr2, 0);	$sum = _z($sum2 / $coef, $curr, 0);	return array($sum, $sum2);}// Operationsfunction opOperChkAWD($o){	global $db, $_cfg;	if ($_cfg['Bal_AWD' . $o['oOper']]) {		$psys = $db->fetch1($db->select('AddInfo', 'aDefCurr', 'auID=?d', array($o['ouID'])));		$b = opReCalcWD($psys, $o['ocCurrID'], $o['oSum']);		$params = array('cid' => $psys, 'sum2' => $b[1]);		$o['oSum'] = $b[0];		return opOperCreate($o['ouID'], 'CASHOUT', $o['ocCurrID'], $o['oSum'] - $o['oComis'], $params, 'Auto', true, true);	} else		return false;}function opOperCreateInfo($uid, $oper, $curr, $sum, $params = array(), $memo = ''){	global $db, $_cfg, $_currs, $_currs2;	$params = asArray($params);	$cid = $params['cid'];	$n = array(		'oid' => $oid,		'oper' => $oper,		'curr' => $curr,		'cid' => $cid,		'sum' => $sum,		'psys' => $_currs2[$cid]['cName']	);	if ($params['comis'] > 0)		$csum = _zr(calcPerc($sum, $params['comis'], 6), $curr);	else		$csum = 0;//	$csum = valueIf(($params['comis'] > 0), _zr(calcPerc($sum, $params['comis'], 6), $curr), 0);	$a = array(		'oCTS' => timeToStamp(),		'oATS' => timeToStamp(time() + HS2_UNIX_HOUR),		'ouID' => $uid,		'oOper' => $oper,		'ocID' => $cid,		'ocCurrID' => $curr,		'ocCurrID2' => $params['curr2'],		'oSum' => $sum,		'oSum2' => $params['sum2'],		'oSumReal' => $sum * $_cfg['Bal_Rate' . $curr],		'oComis' => $csum,		'oParams' => arrayToStr($params),		'oBatch' => $params['batch'],		'oTag' => $params['tag'],		'oTS' => timeToStamp(),		'oState' => 3,		'oMemo' => $memo,		'oNTS' => timeToStamp()	);	$oid = $db->insert('Opers',	$a);	$params = array_merge($params, $n);	$params['url'] = fullURL(moduleToLink('balance/oper'));	if ($usr = opReadUser($uid))	{		SendMailToUser($usr['uMail'], "Oper$oper", 			opUserConsts($usr, $params),			$usr['uLang']		);		sendMailToAdmin("Oper$oper", opUserConsts($usr, $params));	}	opEvent('Oper', $uid, $params);	opOperChkAWD($a);	return $oid;}function opOperCreate($uid, $oper, $curr, $sum, $params = array(), $memo = '', $and_complete = false, $by_admin = false){	global $db, $_cfg, $_currs, $_currs2;	if ($uid < 0)		$uid = _uid();	if (!$uid)		return 'user_empty';	if (!($usr = opReadUser($uid)))		return 'user_wrong';	if (!$oper)		return 'oper_empty';	if (!$_currs[$curr])		return 'curr_wrong';	$cid = $params['cid'];	if (!$cid and ($oper == 'CASHOUT'))		$cid = $usr['aDefCurr'];	if (!$cid and in_array($oper, array('BONUS', 'PENALTY', 'CASHIN', 'CASHOUT', 'TR', 'TRIN')))		return 'psys_empty';	$sum = _zr($sum, $curr);	if ($sum <= 0)		return 'sum_wrong';	$params = asArray($params);	if (is_string($csum = opCalcComis($cid, $oper, $sum, $by_admin)))		return $csum; // 'sum_wrong'	if ($params['comis'] > 0)		$csum += _zr(calcPerc($sum, $params['comis'], 6), $curr);	if (($sum - $csum) < 0)		return 'sum_wrong';	if (in_array($oper, array('PENALTY', 'CASHOUT', 'TR')))		$usr["uBal$curr"] = calcWDAvail($uid, $curr, $cid);	if (in_array($oper, array('PENALTY', 'CASHOUT', 'EX', 'TR', 'BUY', 'BUY2', 'GIVE', 'CALCOUT')))		if ($usr["uBal$curr"] < $sum)			return 'low_bal1';	if ($oper == 'EX')	{		if ($params['curr2'] == $curr)			return 'psys2_equal_psys';		if (!$params['curr2'])			return 'psys2_empty';	}	elseif ($oper == 'TR')	{		if ($params['uid2'] == $uid)			return 'user2_equal_user';		if (!$params['uid2'])			return 'user2_empty';		$params['user'] = $db->fetch1($db->select('Users', 'uLogin', 'uID=? and (uState=1 or uState=2)', array($params['uid2'])));		if (!$params['user'])			return 'user2_not_found';	}	if (($oper == 'CASHOUT') or (($oper == 'EX') and ($cid == 1)))		if ($usr['uWDDisable'])			return 'wd_disable';	$a = array(		'oCTS' => timeToStamp(),		'oATS' => timeToStamp(time() + HS2_UNIX_HOUR),		'ouID' => $uid,		'oOper' => $oper,		'ocID' => $cid,		'ocCurrID' => $curr,		'ocCurrID2' => $params['curr2'],		'oSum' => $sum,		'oSum2' => $params['sum2'],		'oSumReal' => $sum * $_cfg['Bal_Rate' . $curr],		'oComis' => $csum,		'oParams' => arrayToStr($params),		'oBatch' => $params['batch'],		'oTag' => $params['tag'],		'oTS' => 0, // complete date		'oState' => 0,		'oMemo' => $memo,		'oNTS' => 0 // date of modify (by admin / system)	);	$oid = $db->insert('Opers', $a);	if (!$oid)		return 'db_error';	if (in_array($oper, array('CASHIN', 'CASHOUT')))	{		$w = $db->fetch1Row($db->select('Users LEFT JOIN Wallets ON (wcID=?d AND wuID=uID)', 			'*', 'uID=?d', array($cid, $uid)));		$params2 = opDecodeUserCurrParams($w);		$params2['date'] = timeToStamp();		$params2['memo'] = textVarReplace(				exValue('Invoice ##id#, #user#', textLangFilter(exValue($_cfg['Bal_' . $oper . 'Text'], $memo), $w['uLang'])),				array('id' => $oid, 'user' => $w['uLogin'])			);		$db->update('Opers', array('oParams2' => arrayToStr($params2)), '', 'oID=?d', array($oid));	}	if ($and_complete)	{		if (is_string($err = opOperConfirm($uid, $oid, array(), $by_admin)))			return $err;		if (is_string($err = opOperComplete($uid, $oid, array(), $by_admin)))			return $err;	}	return $oid;}function opOperConfirm($uid, $oid, $params = array(), $by_admin = false){	global $db, $_cfg, $_currs;	if (is_array($oid))	{		if ($o = $db->fetch1Row($db->select('Opers', '*', 'oID=?d and ouID=?d', array($id = $oid['oid'], $uid))))			if ($o['oState'] <= 1)			{				$err = opOperConfirm($uid, $id, array());				if (($o['ocID'] == 1) or ($_currs[$o['ocID']]['c' . $o['oOper'] . 'Mode'] == 2))				{					if ($err === 'limit_exceeded')						$err = opOperConfirm($uid, $id, array(), true);					elseif (!is_string($err) and ($o['oOper'] != 'CASHIN'))							opOperComplete($uid, $id, array());					if (is_string($err))						sendMailToAdmin('OperRequired', 							opUserConsts(opReadUser($uid), array('oid' => $id, 'url' => fullURL(moduleToLink('balance/admin/oper')))));				}				$oid = exValue($id, $o['oTag']);				showInfo('Completed', moduleToLink('balance/oper') . "?id=$oid");			}		showInfo('*Error', moduleToLink('balance'));	}	$params = asArray($params);	if (!($o = $db->fetch1Row($db->select('Opers LEFT JOIN Currs ON cID=ocID', '*', 'oID=?d' . valueIf($uid > 0, ' and ouID=?d'), array($oid, $uid)))))		return 'oper_not_found';	if (!(($o['oState'] < 2) or (($o['oState'] == 2) and ($o['oOper'] == 'CASHIN'))))		return 'oper_state_wrong';//	if (!$by_admin and (stampToTime($o['oATS']) < time()))//		return 'oper_expired';	$uid = $o['ouID'];	$oparams = strToArray($o['oParams']);	$oparams2 = strToArray($o['oParams2']);	$a = array(		'oTS' => timeToStamp(),		'oState' => 2	);	$cid = $o['ocCurrID'];	$sum = $o['oSum'];	$res = 'oper_unknown';	switch ($o['oOper'])	{	case 'BONUS':	case 'PENALTY':	case 'TRIN':	case 'SELL':	case 'SELL2':	case 'REF':	case 'CALCIN':	case 'CALCOUT':		$res = true;		break;	case 'CASHIN':		$res = true;		if ($params) // from status		{			if ($params['sum'] === '?')				$params['sum'] = $o['oSum2'];			$params['date'] = timeToStamp($params['date']);			$a['oParams2'] = arrayToStr($params);			$oparams2 = $params;		}		if (!$oparams2['date'])			$res = 'data_date_wrong';		elseif (!$oparams2['batch'])			$res = 'data_batch_wrong';		elseif ($db->count('Opers', 'ocID=?d and oBatch=? and oState=3', array($o['ocID'], $oparams2['batch'])))			$res = 'batch_exists';		$a['oBatch'] = '?' . $oparams2['batch'];		break;	case 'CASHOUT':		if (!$by_admin and ($o['cCASHOUTLimitPer'] > 0))		{			$outsum = $db->fetch1($db->select('Opers', 'SUM(oSum2)',				"(ouID=?d) and (oOper=?) and (ocID=?d) and (oState=3) and (oTS>?)", 				array($uid, 'CASHOUT', $o['ocID'], timeToStamp(time() - ($o['cCASHOUTLimitPer'] * HS2_UNIX_HOUR)))));			if (($sum + $outsum) > $o['cCASHOUTLimit'])			{				$res = 'limit_exceeded';				break;			}		}		$res = opChangeBalance($uid, $cid, -$sum, 0, $sum, true, $oid, '');		break;	case 'EX':		if ($params)		{			$a['oParams'] = arrayToStr($params);			$oparams = $params;		}		$res = opChangeBalance($uid, $cid, -$sum, 0, $sum, true, $oid, '');		break;	case 'TR':		if ($params)		{			$a['oParams'] = arrayToStr($params);			$oparams = $params;		}		if (opUser($oparams['uid2']))			$res = opChangeBalance($uid, $cid, -$sum, 0, $sum, true, $oid, '');		else			$res = 'user2_wrong';		break;	case 'BUY':	case 'GIVE':		$res = opChangeBalance($uid, $cid, -$sum, 0, $sum, !$oparams['nocheck'], $oid, '');		break;	case 'TAKE':		$res = opChangeBalance($uid, $cid, 0, -$sum, $sum, !$oparams['nocheck'], $oid, '');		break;	}	if (is_string($res))		return $res;	$db->update('Opers', $a, '', 'oID=?d', array($oid));	return true;}function opOperComplete($uid, $oid, $params = array(), $by_admin = false, $aparams = array()){	global $db, $_cfg;	if (!$db->update('Opers', array('oPTS' => timeToStamp()), '', 'oID=?d and oState=2 and oPTS<?' . valueIf($uid > 0, ' and ouID=?d'), 		array($oid, timeToStamp(time() - 3 * HS2_UNIX_MINUTE), $uid)))		return 'oper_not_found';	$o = $db->fetch1Row($db->select('Opers LEFT JOIN Currs ON cID=ocID LEFT JOIN Users ON uID=ouID', 		'Opers.*, Currs.*, Users.uLogin', 'oID=?d', array($oid)));	if ($o['oState'] != 2)		return 'oper_state_wrong';	$uid = $o['ouID'];	$params = asArray($params);	$oparams = strToArray($o['oParams']);	$oparams2 = strToArray($o['oParams2']);	$a = array(		'oTS' => timeToStamp(),		'oState' => 3,		'oPTS' => 0	);	if ($params['tag'])	{		$o['oTag'] = $params['tag'];		$a['oTag'] = $params['tag'];	}	if ($by_admin)		$a['oNTS'] = timeToStamp();	$cid = $o['ocCurrID'];	$sum = $o['oSum'] - $o['oComis'];	if ($sum < 0)		return 'oper_sum_wrong';	$n = array(		'oid' => $oid,		'oper' => $o['oOper'],		'tag' => $o['oTag'],		'curr' => $cid,		'cid' => $o['ocID'],		'sum' => $sum,		'psys' => $o['cName']	);	$res = 'oper_unknown';	switch ($o['oOper'])	{	case 'CALCIN':		if ($o['oTag'] > 0)			$a['oMemo'] = $o['oMemo'] . '#' . $o['oTag'];	case 'TRIN':	case 'BONUS':	case 'SELL':	case 'SELL2':	case 'REF':		$res = opChangeBalance($uid, $cid, $sum, 0, 0, false, $oid, $o['oMemo']);		if ($o['oOper'] == 'REF')			if (!$db->update('Opers_refs_summ', array('Sum=' => 'Sum+' . $o['oSumReal'], "Sum$cid=" => "Sum$cid+$sum"), '', 					'User_ID=?d and Ref_ID=?d', array($o['oTag'], $uid)))				$db->replace('Opers_refs_summ', array('User_ID' => $o['oTag'], 'Ref_ID' => $uid, 'Sum' => $o['oSumReal'], "Sum$cid" => $sum));		break;	case 'PENALTY':	case 'CALCOUT':		$res = opChangeBalance($uid, $cid, -$sum, 0, 0, !$by_admin, $oid, $o['oMemo']);		break;	case 'CASHOUT':		if ($params['date']) // fake send ??? direct params		{			$params['date'] = timeToStamp($params['date']);			$a['oParams2'] = arrayToStr($params);			$oparams2 = $params;		}		elseif (!$oparams2['batch'] or ($oparams2['batch'] == '-')) // real send		{			include_once('lib/psys.php');			if (!$aparams['apipass']) // NO psys direct access params				opDecodeCurrParams($o, $r, $r, $aparams);			$c = getCIDs($o['cCID']);			if ($c[3] and $aparams['apipass']) // psys access password is set?			{				// pay SUM-COMIS from $aparams to $oparams2				$o['oSum2'] -= opCalcComis($o['ocID'], $o['oOper'], $o['oSum2'], $by_admin);				$r = sendMoney($o['cCID'], $aparams, $oparams2, $o['oSum2'], $oparams2['memo'], $oid, fullURL(moduleToLink('balance/status')));				$db->update('Opers', array('oMemo' => '~' . $r['result']), '', 'oID=?d', array($oid));				if (!$r['batch'])				{					$res = 'send_error';					break;				}				$oparams2['date'] = timeToStamp();				$oparams2['batch'] = $r['batch'];			}		}		$n['acc'] = $oparams2['acc']; // payee acc		$n['batch'] = $oparams2['batch'];	case 'CASHIN':		if ($oparams2['cid'] and ($oparams2['cid'] != $o['ocID']))			return 'psys_wrong';		if (isset($oparams2['sum'])) // SUM from SCI		{			$a['oSum2'] = $sum2 = _zr($oparams2['sum'], $o['ocID']);			$a['oSum'] = $sum = opReCalcAFReal($o['ocID'], $cid, $sum2);			if (is_string($res = opCalcComis($o['ocID'], $o['oOper'], $sum, $by_admin)))				break;			$a['oComis'] = $res;			if (($sum -= $res) < 0)			{				$res = 'data_sum_wrong';				break;			}			$n['sum'] = $sum;		}		if (!$oparams2['date'])			$res = 'data_date_wrong';		elseif (!$oparams2['batch'])			$res = 'data_batch_wrong';		elseif (!$r['batch'] and $db->count('Opers', 'ocID=?d and oBatch=? and oState=3', array($o['ocID'], $oparams2['batch'])))			$res = 'batch_exists';		else		{			$a['oCTS'] = $oparams2['date'];			$a['oBatch'] = $oparams2['batch'];			$a['oMemo'] = $oparams2['memo'];			if ($o['oOper'] == 'CASHIN')			{				$res = opChangeBalance($uid, $cid, $sum, 0, 0, false, $oid, $a['oMemo']);				if ($oparams2['acc']) // try fill currency property 'acc'				{					$w = $db->fetch1Row($db->select('AddInfo LEFT JOIN Wallets ON (wcID=?d AND wuID=auID)', 						'AddInfo.aDefCurr, Wallets.*', 'auID=?d', array($o['ocID'], $uid)));					$p = opDecodeUserCurrParams($w);					if (!$p['acc']) // first time ('acc' empty)					{						$t = time();						$key = $o['ocID'] . $uid . $t;						$p = array(							'wParams' => encodeArrayToStr(array('acc' => $oparams2['accfrom']), $key),							'wMTS' => timetostamp($t)						);						if (!$w['wcID']){							$p['wcID'] = $o['ocID'];							$p['wuID'] = $uid;							$db->insert('Wallets', $p);						}							else						$db->update('Wallets', $p, '', 'wcID=?d and wuID=?d', array($o['ocID'], $uid));					}					if (!$w['aDefCurr'])						$db->update('AddInfo', array('aDefCurr' => $o['ocID']), '', 'auID=?d', array($uid));				}			}			else				$res = opChangeBalance($uid, $cid, 0, 0, -$o['oSum'], false, $oid, $o['oMemo']);		}		break;	case 'EX':		$res = opChangeBalance($uid, $cid, 0, 0, -$o['oSum'], false, $oid, $o['oMemo']);		if ($res === true)		{			$res = opChangeBalance($uid, $o['ocCurrID2'], $o['oSum2'], 0, 0, false, $oid, $o['oMemo']);			$batch = 'EX' . str_pad($oid, 6, '0', STR_PAD_LEFT);			$a['oBatch'] = $batch;			$n['batch'] = $batch;			$n['course'] = round($o['oSum2'] / $sum, 4);			global $_currs;			$n['curr'] = $cid;			$n['curr2'] = $o['ocCurrID2'];		}		break;	case 'TR':		if ($usr2 = opReadUser($oparams['uid2']))		{			$res = opChangeBalance($uid, $cid, 0, 0, -$o['oSum'], false, $oid, $o['oMemo']);			if ($res === true)			{				$batch = 'TR' . str_pad($oid, 6, '0', STR_PAD_LEFT);				$a['oBatch'] = $batch;				$n['to'] = $usr2['uLogin'];				$n['batch'] = $batch;				opOperCreate($oparams['uid2'], 'TRIN', $o['ocCurrID'], $sum, 					array(						'oid' => $oid,						'cid' => $o['ocID'],						'uid2' => $uid,						'sum2' => $o['oSum2'],						'user' => $o['uLogin'],						'batch' => $batch					), $o['oMemo'], true, $by_admin);			}		}		else			$res = 'user2_wrong';		break;	case 'BUY':		$res = opChangeBalance($uid, $cid, 0, 0, -$o['oSum'], false, $oid, $o['oMemo']);		break;	case 'GIVE':		if ($oparams['bonus'] > 0)			opOperCreateInfo($uid, 'BONUS', $cid, $oparams['bonus']);		$res = opChangeBalance($uid, $cid, 0, $sum + $oparams['bonus'], -$o['oSum'], false, $oid, $o['oMemo']);		if ($o['oTag'] > 0)			$a['oMemo'] = $o['oMemo'] . '#' . $o['oTag'];		break;	case 'TAKE':		$res = opChangeBalance($uid, $cid, $sum, 0, -$o['oSum'], false, $oid, $o['oMemo']);		if ($o['oTag'] > 0)			$a['oMemo'] = $o['oMemo'] . '#' . $o['oTag'];		break;	}	if (is_string($res))	{		$db->update('Opers', array('oPTS' => 0), '', 'oID=?d', array($oid));//		if (!$by_admin)			sendMailToAdmin('OperNotComplete', 				opUserConsts(opReadUser($uid), array('oid' => $oid, 'url' => fullURL(moduleToLink('balance/admin/oper')))));		return $res;	}	$db->update('Opers', $a, '', 'oID=?d', array($oid));	$oparams = array_merge($oparams, $n);	$oparams['url'] = fullURL(moduleToLink('balance/oper'));	if ($usr = opReadUser($uid))	{		useLib('sms');		if (function_exists('smsToUser'))			smsToUser($uid, $usr['aTel'], 'Oper' . $o['oOper'], opUserConsts($usr, $oparams), $usr['uLang']);		sendMailToUser($usr['uMail'], 'Oper' . $o['oOper'], 			opUserConsts($usr, $oparams),			$usr['uLang']		);		sendMailToAdmin('Oper' . $o['oOper'], 			opUserConsts($usr, $oparams));	}	$oparams['coef'] = array($o['ocID'] => 1);	opEvent('Oper', $uid, $oparams);	opOperChkAWD($o);	return true;}function opOperCancel($uid, $oid, $params = array(), $by_admin = false){	global $db, $_cfg;	$params = asArray($params);	if (!($o = $db->fetch1Row($db->select('Opers', '*', 'oID=?d' . valueIf($uid > 0, ' and ouID=?d'), array($oid, $uid)))))		return 'oper_not_found';	if ($o['oState'] >= 3)		return 'oper_state_wrong';	$uid = $o['ouID'];	$oparams = strToArray($o['oParams']);	$oparams2 = strToArray($o['oParams2']);	$a = array(		'oTS' => timeToStamp(),		'oState' => ($by_admin ? 4 : 5)	);	if ($by_admin)		$a['oNTS'] = timeToStamp();	$cid = $o['ocCurrID'];	$sum = $o['oSum'];	if ($o['oState'] == 2)	{		$res = 'oper_unknown';		switch ($o['oOper'])		{		case 'BONUS':		case 'PENALTY':		case 'CASHIN':		case 'TRIN':		case 'SELL':		case 'SELL2':		case 'REF':		case 'CALCIN':		case 'CALCOUT':			$res = true;			break;		case 'CASHOUT':		case 'EX':		case 'TR':		case 'BUY':		case 'GIVE':			$res = opChangeBalance($uid, $cid, $sum, 0, -$sum, false, $oid, '');			break;		case 'TAKE':			$res = opChangeBalance($uid, $cid, 0, $sum, -$sum, false, $oid, '');			break;		}		if (is_string($res))			return $res;	}	$db->update('Opers', $a, '', 'oID=?d', array($oid));	return true;}// Change balancefunction opChangeBalance($uid, $curr, $z1, $z2, $z3, $chk_before = true, $oid = 0, $memo = ''){    global $db;	if (($uid <= 0) or !in_array($curr, array('USD', 'EUR', 'RUB', 'BTC', 'ETH', 'XRP')))		return 'bal_wrong';	if (($curr == 'BTC') or ($curr == 'ETH') or ($curr == 'XRP'))		$r = 4;	else		$r = 2;	$z1 = round($z1, $r);	$z2 = round($z2, $r);	$z3 = round($z3, $r);	if (($z1 == 0) and ($z2 == 0) and ($z3 == 0))		return true;	$z = $z1 + $z2 + $z3;	global $db;	$usr = $db->fetch1Row(		$db->select('Users', "uBal$curr, uLock$curr, uOut$curr", 'uID=?d', array($uid))	);	if (!$db->update('Users',		array(			"uBal$curr=" => "uBal$curr+$z1",			"uLock$curr=" => "uLock$curr+$z2",			"uOut$curr=" => "uOut$curr+$z3"		),		'', "uID=?d and (uBal$curr+$z1)>=0 and (uLock$curr+$z2)>=0 and (uOut$curr+$z3)>=0", array($uid)	))		return 'low_bal1';	opAddHist('BAL', $uid, '', $memo, 0, $curr, $z, $oid);	return true;}// Currs supportfunction opDecodeCurrParams($crec, &$p, &$p_sci, &$p_api){	$key = $crec['cID'] . $crec['cCID'] . stampToTime($crec['cMTS']);	$p = decodeArrayFromStr($crec['cParams'], $key);	$p_sci = decodeArrayFromStr($crec['cParamsSCI'], $key, 2);	$p_api = decodeArrayFromStr($crec['cParamsAPI'], $key, 3);}function opDecodeUserCurrParams($wrec){	$key = $wrec['wcID'] . $wrec['wuID'] . stampToTime($wrec['wMTS']);	return decodeArrayFromStr($wrec['wParams'], $key);}function opEditToCurrParams($fields, $old, $new, $fn = ''){	if (!is_array($old))		$old = array();	foreach ($fields as $f => $v)		if (!is_int($f))		{			$is_pass = ((substr($f, -3) == 'key') or (substr($f, -4) == 'pass'));			if ($new[$f] or !$is_pass)			{				if ($new[$f] and $v[1] and !preg_match('/^' . $v[1] . '$/', $new[$f]))					return $fn . $f . '_wrong';				if (!$is_pass)					$new[$f] = strip_tags($new[$f]);				elseif ($new[$f] == '-')					$new[$f] = '';				$old[$f] = $new[$f];			}		}	foreach ($old as $f => $v)		if (sEmpty($v))			unset($old[$f]);	return $old;}function opCurrParamsToEdit($fields, $fn = '', $readonly = false){	$res = array();	foreach ($fields as $f => $v)	{		if (is_int($f))			$res[$f] = $v;		else		{			$fi = ($fn ? $fn . '[' . $f . ']' : $f);			if ($f == '_url')			{				$url = fullURL(moduleToLink('balance/status'));				$res[$fi] = 					array('X', $v[0], 0, "<a href=\"$url\" target=\"_blank\">$url</a>");//				$res[$fn . '[hideurl]'] = //					array('C', 'Hide URL');			}			else			{				$is_pass = ((substr($f, -3) == 'key') or (substr($f, -4) == 'pass'));				$res[$fi] =					array(						valueIf($is_pass, '*', valueIf($v[3], 'S', 'T')),						$v[0], 						array($fn . $f . '_wrong' => '{!en!}wrong format{!ru!}неверный формат'),						$v[3],						'comment' => $v[2],						'readonly' => $readonly					);			}		}	}	return $res;}function calcWDCoef(&$a, $curr, $z, $partto, $partfrom = false){	global $_currs2;	$p = array();	if ($z < 0)		$ztot = $a[$partto][0];	else		$ztot = $a['bal'][0] + $a['depo'][0];	if (round($ztot, 6) != 0.000)	{		foreach ($_currs2 as $cid => $c)			if ($z < 0)				$p[$cid] = $a[$partto][$cid] / $ztot;			else				$p[$cid] = ($a['bal'][$cid] + $a['depo'][$cid]) / $ztot;	}	else	{		foreach ($_currs2 as $cid => $c)			if ($c['cCASHOUTMode'] > 0)				$p[$cid] = 0;		foreach ($p as $cid => $perc)			$p[$cid] = 1 / count($p);	}	foreach ($p as $cid => $cf)		if (round($cf, 3) != 0.000)		{			$a[$partto][$cid] += ($dz = _z(round($z * $cf, 6), $curr));			if ($partfrom)				$a[$partfrom][$cid] -= $dz;		}	$a[$partto][0] += $z;	if ($partfrom)		$a[$partfrom][0] -= $z;}function calcWDAvail($uid, $curr, $cid, $all = false){	if (!$usr = opReadUser($uid))		return false;	global $db, $_cfg, $_currs, $_currs2;	if (!$_cfg['Bal_PayOutType'] or !$_currs[$curr])		return _z($usr["uBal$curr"], $curr);	// = 2 - proporc.	$a = array();	$ol = $db->select('Opers', '*', 'ouID=?d and (oState=2 or oState=3)', array($uid), 'oID');	while ($o = $db->fetch($ol))	{//xecho($o);		$z = $o['oSum'];		switch ($o['oOper'])		{		case 'PENALTY':		case 'CASHOUT':		case 'TR':			$z = -$z;		case 'BONUS':		case 'CASHIN':		case 'TRIN':			$a[$o['ocCurrID']]['bal'][$o['ocID']] += $z;			$a[$o['ocCurrID']]['bal'][0] += $z;			break;		case 'EX':			calcWDCoef($a[$o['ocCurrID2']], $o['ocCurrID2'], $o['oSum2'], 'bal');		case 'BUY':		case 'BUY2':		case 'CALCOUT':			$z = -$z;		case 'REF': 		case 'EXIN':		case 'SELL':		case 'SELL2':		case 'CALCIN':			$oparams = strToArray($o['oParams']);			if (is_array($coef = $oparams['coef']))			{				foreach ($coef as $i => $cf)					if ($cf > 0)						$a[$o['ocCurrID']]['bal'][$i] += round($z * $cf, 6);				$a[$o['ocCurrID']]['bal'][0] += $z;			}			else				calcWDCoef($a[$o['ocCurrID']], $o['ocCurrID'], $z, 'bal');			break;		case 'GIVE':			calcWDCoef($a[$o['ocCurrID']], $o['ocCurrID'], -$z, 'bal', 'depo');			break;		case 'TAKE':			calcWDCoef($a[$o['ocCurrID']], $o['ocCurrID'], -$z, 'depo', 'bal');			break;		}//xecho($a);	}	if ($all)		return $a;	return _z($a[$curr]['bal'][$cid], $curr);}function prepareStat(){	global $db;/*	setPage('stats', $db->fetchIDRows($db->select('Currs', 		"*, 		(SELECT SUM(oSum) FROM Opers WHERE ouID=?d AND ocID=cID AND oOper='REF' AND oState=3) AS ZREF,		(SELECT SUM(oSum) FROM Opers WHERE ouID=?d AND ocID=cID AND oOper='CALCIN' AND oState=3) AS ZCALCIN,		(SELECT SUM(oSum) FROM Opers WHERE ouID=?d AND ocID=cID AND ((cID=1 AND oOper='EXIN') OR (cID>1 AND oOper='CASHIN')) AND oState=3) AS ZIN,		(SELECT SUM(oSum) FROM Opers WHERE ouID=?d AND ocID=cID AND ((cID=1 AND oOper='EX') OR (cID>1 AND oOper='CASHOUT')) AND oState=3) AS ZOUT,		(SELECT SUM(dZD) FROM Deps WHERE duID=?d AND dcID=cID AND dState=1) AS ZINDEPO		", 		'cDisabled=0', array(_uid(), _uid(), _uid(), _uid(), _uid()), 'cID'), false, 'cID'));*/}?>